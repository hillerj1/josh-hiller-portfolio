---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const all = await getCollection('projects');
const software = all.filter((p) => p.data.group === 'Software')
  .sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const quantum = all.filter((p) => p.data.group === 'Quantum')
  .sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
  /* NEW */
const certs = (await getCollection('certifications')).sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const quotes = (await getCollection('testimonials')).sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const skills = (await getCollection('skills')).sort((a,b) => (a.data.order ?? 999) - (b.data.order ?? 999));
const edu = (await getCollection('education')).sort((a, b) => (a.data.order ?? 999) - (b.data.order ?? 999));
const xp = (await getCollection('experience')).sort((a, b) => {
  const ao = a.data.order ?? Infinity;
  const bo = b.data.order ?? Infinity;
  if (ao !== bo) return ao - bo;
  return (a.data.start ?? '').localeCompare(b.data.start ?? '');
});

---

<Layout title="Josh Hiller — Portfolio">
  <!-- HOME / HERO -->
	<section id="home" class="hero">
  <div class="container">
    <h1 class="hero-title">Josh Hiller</h1>

    <p class="subtitle">
      Actively seeking roles in software engineering, software developing, cybersecurity, quantum computing, or related fields.
    </p>

    <div class="scroll-cue" aria-hidden="true">
      <span>Scroll</span>
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M6 9l6 6 6-6" />
      </svg>
    </div>
  </div>
</section>


  <!-- PROJECTS -->
  <section id="projects" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Projects</h2>

      <h3 class="mb-sm">Quantum Computing</h3>
      <div class="grid">
        {quantum.map(({ slug, data }) => (
          <a href={`/projects/${slug}/`} class="card-link">
            <img src={data.image} alt={data.title} loading="lazy" />
            <div style="padding:16px 16px 18px;">
              <div class="muted mb-xs">{data.category}</div>
              <h4 style="margin:0 0 6px;font-size:1.1rem;">{data.title}</h4>
              <p class="muted" style="line-height:1.45;">{data.summary}</p>
            </div>
          </a>
        ))}
      </div>

      <h3 class="mt-md mb-sm">Software Engineering</h3>
      <div class="grid">
        {software.map(({ slug, data }) => (
          <a href={`/projects/${slug}/`} class="card-link">
            <img src={data.image} alt={data.title} loading="lazy" />
            <div style="padding:16px 16px 18px;">
              <div class="muted mb-xs">{data.category}</div>
              <h4 style="margin:0 0 6px;font-size:1.1rem;">{data.title}</h4>
              <p class="muted" style="line-height:1.45;">{data.summary}</p>
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
  
	<!-- SKILLS -->
<section id="skills" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Skills</h2>
    <div class="skills-grid">
      {skills.map(({ data }) => (
        <div class="skill-card card">
          <h3 class="h3" style="margin:0 0 10px;">{data.title}</h3>
          <ul class="skills-list">
            {data.items.map((s) => (
              <li class="skill-item">
                <span class="skill-name">{s.name}</span>
                <span class="skill-dots" aria-label={`Level ${s.level} of 5`}>
                  {[1,2,3,4,5].map(n => (
                    <span class={`dot ${n <= s.level ? 'on' : ''}`} />
                  ))}
                </span>
                {s.note ? <span class="skill-note">{s.note}</span> : null}
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  </div>
</section>

  <!-- CERTIFICATIONS -->
<section id="certifications" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Certifications</h2>
    <div class="grid">
      {certs.map(({ data }) => (
        <div class="card" style="display:flex;gap:14px;align-items:flex-start;">
          {data.image ? <img src={data.image} alt={data.title} style="width:56px;height:56px;object-fit:contain;border-radius:10px;" /> : null}
          <div style="flex:1;">
            <div style="display:flex;gap:8px;align-items:baseline;flex-wrap:wrap;">
              <strong>{data.title}</strong>
              <span class="muted">· {data.issuer}</span>
            </div>
            {data.date ? <div class="muted" style="font-size:.9rem;margin-top:4px;">{data.date}</div> : null}
            {data.skills?.length ? (
              <ul class="tag-list" style="margin-top:8px;">
                {data.skills.map((s) => <li class="tag">{s}</li>)}
              </ul>
            ) : null}
            <div style="display:flex;gap:10px;margin-top:8px;">
              {data.verifyUrl ? <a href={data.verifyUrl} target="_blank" rel="noopener" class="link">Verification</a> : null}
              {data.credentialId ? <span class="muted">ID: {data.credentialId}</span> : null}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<!-- EXPERIENCE -->
<section id="experience" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Experience</h2>

    <div class="xp-carousel">
      <button class="xp-nav prev" aria-label="Previous experience" type="button">‹</button>

      <ol class="xp-track" aria-label="Experience timeline">
        {xp.map(({ data }) => (
          <li class="xp-card card">
            <div class="xp-meta">
              {data.logo
                ? <img src={data.logo} alt={data.company} class="xp-logo" width="36" height="36" loading="lazy" />
                : <div class="xp-dot" aria-hidden="true" />}
              <div class="xp-head">
                <div class="xp-role">{data.role}</div>
                <div class="xp-company">
                  {data.link
                    ? <a class="link" href={data.link} target="_blank" rel="noopener">{data.company}</a>
                    : data.company}
                  {data.location ? <span class="muted"> · {data.location}</span> : null}
                </div>
                <div class="xp-dates muted">{data.start} — {data.end ?? 'Present'}</div>
              </div>
            </div>

            <ul class="xp-bullets">
              {data.bullets.map((b) => <li>{b}</li>)}
            </ul>

            {data.tech?.length ? (
              <ul class="tag-list" style="margin-top:8px;">
                {data.tech.map((t) => <li class="tag">{t}</li>)}
              </ul>
            ) : null}
          </li>
        ))}
      </ol>

      <button class="xp-nav next" aria-label="Next experience" type="button">›</button>
    </div>

   <p class="xp-hint">Swipe or use the arrows</p>
  </div>

  <!-- tiny inline script to make the arrows scroll by one card -->
 <script is:inline>
  const container = document.currentScript?.previousElementSibling; // the .container
  const carousel  = container?.querySelector('.xp-carousel');
  const track     = carousel?.querySelector('.xp-track');
  const prev      = carousel?.querySelector('.xp-nav.prev');
  const next      = carousel?.querySelector('.xp-nav.next');

  // Button step size = one card width (+ gap)
  function step() {
    const card = track?.querySelector('.xp-card');
    if (!card) return 360;
    const rect = card.getBoundingClientRect();
    const styles = getComputedStyle(track);
    const gap = parseFloat(styles.columnGap || styles.gap) || 12;
    return rect.width + gap;
  }

  // Buttons (also pause autoplay briefly)
  function pause(ms = 5000){ stop(); clearTimeout(resumeTimer); resumeTimer = setTimeout(play, ms); }
  prev?.addEventListener('click', () => { track?.scrollBy({left:-step(), behavior:'smooth'}); pause(5000); });
  next?.addEventListener('click', () => { track?.scrollBy({left: step(), behavior:'smooth'}); pause(5000); });

  // --- AUTOPLAY (continuous) ---
  const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  let rafId = 0, playing = false, resumeTimer = 0;
  let speed = 1.2; // px per frame (~72px/s at 60fps). Increase if you want faster.

  // Duplicate content to enable seamless loop
  const origHTML = track?.innerHTML ?? '';
  function primeLoop(){
    if (!track) return;
    track.innerHTML = origHTML + origHTML;           // duplicate once
    track.scrollLeft = 0;
  }

  function loop(){
    if (!playing || !track) return;
    track.scrollLeft += speed;

    // When we've scrolled past the first half (original set), jump back by that amount
    const half = track.scrollWidth / 2;
    if (track.scrollLeft >= half) {
      track.scrollLeft -= half;
    }
    rafId = requestAnimationFrame(loop);
  }

  function play(){
    if (reduceMotion.matches || playing || !track) return;
    playing = true;
    cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(loop);
  }

  function stop(){
    playing = false;
    cancelAnimationFrame(rafId);
  }

  // Pause/resume on interaction
  track?.addEventListener('mouseenter', () => stop());
  track?.addEventListener('mouseleave', () => play());
  track?.addEventListener('pointerdown', () => pause(7000));
  track?.addEventListener('wheel', () => pause(4000));
  track?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') pause(6000);
  });

  // Start when section visible; stop when off-screen
  const section = container?.closest('section');
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => { e.isIntersecting ? play() : stop(); });
  }, { threshold: 0.15 });

  // Prime & observe after layout
  requestAnimationFrame(() => {
    primeLoop();
    if (section) io.observe(section);
    // Fallback: if IO doesn't fire (already on screen), just start
    if (section?.getBoundingClientRect().top < window.innerHeight) play();
  });

  // Respect reduced motion changes live
  reduceMotion.addEventListener?.('change', () => { reduceMotion.matches ? stop() : play(); });

  // Re-prime on resize (so card widths update)
  let resizeTimer = 0;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => { stop(); primeLoop(); play(); }, 200);
  });
</script>

</section>
  <!-- EDUCATION -->
  <section id="education" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Education</h2>

      <div class="education-grid">
        {edu.map(({ data }) => (
          <article class="education-card">
            <div class="education-header">
              {data.logo ? (
                <img src={data.logo} alt={data.school} class="edu-logo" width="48" height="48" loading="lazy" />
              ) : null}
              <div class="education-info">
                <h3 class="h3" style="margin:0;">
                  {data.link ? (
                    <a class="link" href={data.link} target="_blank" rel="noopener">{data.school}</a>
                  ) : data.school}
                </h3>
                <div class="education-degree">
                  {data.degree}
                  {data.location ? ` · ${data.location}` : ''}
                </div>
                <div class="education-dates">
                  {data.start} — {data.end ?? 'Present'}
                  {data.gpa ? ` · GPA: ${data.gpa}` : null}
                </div>
              </div>
            </div>

            {data.highlights?.length ? (
              <div class="education-highlights">
                <div class="muted" style="font-size:.9rem;margin-bottom:6px;">Highlights:</div>
                <ul class="highlights-list">
                  {data.highlights.map((h) => <li>{h}</li>)}
                </ul>
              </div>
            ) : null}

            {data.coursework?.length ? (
              <details class="coursework-details">
                <summary class="link">Relevant coursework</summary>
                <div class="coursework-grid">
                  {data.coursework.map((c) => <span class="course-tag">{c}</span>)}
                </div>
              </details>
            ) : null}
          </article>
        ))}
      </div>
    </div>
  </section>

<!-- TESTIMONIALS -->
<section id="testimonials" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Testimonials</h2>
    <div class="grid">
      {quotes.map(({ data }) => (
        <blockquote class="card" style="margin:0;display:grid;grid-template-columns:auto 1fr;gap:14px;align-items:center;">
          {data.avatar ? <img src={data.avatar} alt={data.author} style="width:56px;height:56px;border-radius:50%;object-fit:cover;" /> : null}
          <div>
            <p style="margin:0 0 8px;line-height:1.5;">“{data.quote}”</p>
            <footer class="muted" style="font-size:.95rem;">
              — {data.author}
              {data.role ? `, ${data.role}` : ''}{data.org ? `, ${data.org}` : ''}
              {data.link ? (
                <>
                  {' · '}
                  <a href={data.link} class="link" target="_blank" rel="noopener">Profile</a>
                </>
              ) : null}
            </footer>
          </div>
        </blockquote>
      ))}
    </div>
  </div>
</section>


  <!-- ABOUT -->
<section id="about" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">About Me</h2>

    <div class="card">
      <p>
        I’m Josh Hiller — a Union College physics student (CS minor) who likes building software,
        running experiments, and turning hard ideas into clear explanations.
      </p>

      <p>
        <strong>Science & tech:</strong> I’ve worked on a parametric down-conversion setup for
        single-photon experiments (tightened the apparatus, sped up Python data collection/processing);
        built computational physics simulations (PHY 310); and created Manim visuals. I also earned
        three IBM Quantum credentials in Feb 2025 (Basics of Quantum Information, Practical Intro to
        Quantum-Safe Cryptography, Variational Algorithm Design).
      </p>

      <ul style="margin:0 0 12px 18px; line-height:1.6;">
        <li><strong>Industry:</strong> Software Developer Intern @ Sigma Software (Python, collaboration, delivery).</li>
        <li><strong>Quantum/Algorithms:</strong> Qiskit circuits, variational workflows, simulator vs. hardware comparisons.</li>
      </ul>

      <p>
        <strong>What I’m looking for:</strong> roles where I can ship real software (data/infra, simulation, dev tools)
        and keep a foot in quantum (algorithms, simulation, education, or platform tooling). I like teams that mentor,
        measure outcomes, and write things down.
      </p>

      <p>
        <strong>Outside the lab:</strong> Team captain for Union Men’s Swimming & Diving (SAAC member), campus tour guide,
        and community volunteer. (See Linkedin Below)
      </p>
    </div>

    <!-- Optional photo row (replace images with your own or remove this block) -->
  	<div class="photo-grid">
  		<figure class="photo"><img src="/assets/about/swim-1.png" alt="Training" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/hiking.png" alt="Hiking" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/hiking2.png" alt="Hiking" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/headshot.jpeg" alt="Headshot" loading="lazy" /></figure>
	</div>
  </div>
</section>


  <!-- CONTACT (Netlify form, no backend needed) -->
  <section id="contact" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Contact</h2>
      <form name="contact" method="POST" data-netlify="true" class="card" style="max-width:720px;">
        <input type="hidden" name="form-name" value="contact" />
        <label>Name<br/><input name="name" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"/></label>
        <label>Email<br/><input name="email" type="email" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"/></label>
        <label>Message<br/><textarea name="message" rows="6" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"></textarea></label>
        <button class="btn btn-primary" type="submit">Send</button>
      </form>

      <p class="muted mt-md">
        Or reach me at <a class="link" href="joshhiller8@gmail.com">joshhiller8@gmail.com</a>
        · <a class="link" href="https://github.com/hillerj1" target="_blank" rel="noopener">GitHub</a>
        · <a class="link" href="https://www.linkedin.com/in/joshua-hiller-58m/" target="_blank" rel="noopener">LinkedIn</a>
      </p>
    </div>
  </section>

  <style>
    /* Global Hover Effects for All Cards and Interactive Elements */
    
    /* All cards get hover effects */
    .card, .card-link, .skill-card, .xp-card, blockquote.card {
      transition: all 0.2s ease;
      cursor: pointer;
    }
    
    .card:hover, .card-link:hover, .skill-card:hover, .xp-card:hover, blockquote.card:hover {
      border-color: var(--card-border-hover, #475569);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    /* Project cards get special hover treatment */
    .card-link {
      display: block;
      text-decoration: none;
      color: inherit;
      border-radius: 12px;
      overflow: hidden;
    }
    
    .card-link:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    }
    
    .card-link:hover img {
      transform: scale(1.02);
    }
    
    .card-link img {
      transition: transform 0.3s ease;
    }
    
    /* Skills cards */
    .skill-card {
      border-radius: 12px;
      padding: 20px;
    }
    
    .skill-card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Experience cards */
    .xp-card {
      border-radius: 12px;
      padding: 20px;
    }
    
    .xp-card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Certification cards */
    .card[style*="display:flex;gap:14px"]:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Testimonial cards */
    blockquote.card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Tag hover effects */
    .tag, .course-tag {
      transition: all 0.2s ease;
      cursor: default;
    }
    
    .tag:hover, .course-tag:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      background: var(--tag-bg-hover, #4b5563);
    }
    
    /* Button hover effects */
    .btn {
      transition: all 0.2s ease;
    }
    
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    
    .btn-primary:hover {
      background: var(--btn-primary-hover, #1d4ed8);
    }
    
    /* Link hover effects */
    .link {
      transition: all 0.2s ease;
    }
    
    .link:hover {
      color: var(--link-hover, #60a5fa);
      text-decoration: underline;
    }
    
    /* Form input hover effects */
    input, textarea {
      transition: all 0.2s ease;
    }
    
    input:focus, textarea:focus {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      border-color: var(--accent-color, #3b82f6);
    }
    
    /* Photo hover effects */
    .photo img {
      transition: all 0.3s ease;
    }
    
    .photo:hover img {
      transform: scale(1.05);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }
    
    /* Navigation arrows hover effects */
    .xp-nav {
      transition: all 0.2s ease;
    }
    
    .xp-nav:hover {
      background: var(--nav-hover, #374151);
      transform: scale(1.1);
    }
    
    /* Education Section Styles */
    .education-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: 24px;
      margin-top: 24px;
    }

    .education-card {
      background: var(--card-bg, #1e293b);
      border: 1px solid var(--card-border, #334155);
      border-radius: 12px;
      padding: 24px;
      transition: all 0.2s ease;
    }

    .education-card:hover {
      border-color: var(--card-border-hover, #475569);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .education-header {
      display: flex;
      gap: 16px;
      align-items: flex-start;
      margin-bottom: 20px;
    }

    .education-info {
      flex: 1;
    }

    .education-degree {
      color: var(--muted-color, #94a3b8);
      font-size: 0.95rem;
      margin: 4px 0;
    }

    .education-dates {
      color: var(--muted-color, #94a3b8);
      font-size: 0.9rem;
      margin-top: 4px;
    }

    .education-highlights {
      margin: 16px 0;
      padding: 16px;
      background: var(--highlights-bg, rgba(59, 130, 246, 0.1));
      border-radius: 8px;
      border-left: 3px solid var(--accent-color, #3b82f6);
    }

    .highlights-list {
      margin: 0;
      padding-left: 20px;
      line-height: 1.6;
    }

    .highlights-list li {
      margin-bottom: 4px;
    }

    .coursework-details {
      margin-top: 16px;
    }

    .coursework-details summary {
      cursor: pointer;
      font-weight: 500;
      color: var(--link-color, #3b82f6);
      margin-bottom: 12px;
    }

    .coursework-details summary:hover {
      text-decoration: underline;
    }

    .coursework-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 12px;
    }

    .course-tag {
      background: var(--tag-bg, #374151);
      color: var(--tag-color, #e5e7eb);
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      border: 1px solid var(--tag-border, #4b5563);
    }

    .edu-logo {
      border-radius: 8px;
      object-fit: contain;
      background: var(--logo-bg, rgba(255, 255, 255, 0.05));
      padding: 4px;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .education-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      
      .education-card {
        padding: 20px;
      }
      
      .education-header {
        gap: 12px;
      }
    }
  </style>
</Layout>
