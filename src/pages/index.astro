---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const all = await getCollection('projects');
const software = all.filter((p) => p.data.group === 'Software')
  .sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const quantum = all.filter((p) => p.data.group === 'Quantum')
  .sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
  /* NEW */
const certs = (await getCollection('certifications')).sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const quotes = (await getCollection('testimonials')).sort((a,b)=>(b.data.date??'').localeCompare(a.data.date??''));
const skills = (await getCollection('skills')).sort((a,b) => (a.data.order ?? 999) - (b.data.order ?? 999));
const edu = (await getCollection('education')).sort((a, b) => (a.data.order ?? 999) - (b.data.order ?? 999));
const xp = (await getCollection('experience')).sort((a, b) => {
  const ao = a.data.order ?? Infinity;
  const bo = b.data.order ?? Infinity;
  if (ao !== bo) return ao - bo;
  return (a.data.start ?? '').localeCompare(b.data.start ?? '');
});

---

<Layout title="Josh Hiller ‚Äî Portfolio">
  <!-- Progress Bar -->
  <div class="progress-bar" id="progress-bar"></div>
  
  <!-- HOME / HERO -->
	<section id="home" class="hero">
  <div class="container">
    <h1 class="hero-title">Josh Hiller</h1>

    <p class="subtitle">
      Physics student with strong foundations in software development and computational physics, seeking to expand expertise in quantum computing and generative AI fundamentals while pursuing opportunities in research and industry.
    </p>

    <div class="hero-social">
      <a href="https://github.com/hillerj1" target="_blank" rel="noopener" class="social-link" aria-label="GitHub">
        <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
        </svg>
      </a>
      <a href="https://www.linkedin.com/in/joshua-hiller-58m/" target="_blank" rel="noopener" class="social-link" aria-label="LinkedIn">
        <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
        </svg>
      </a>
      <a href="mailto:joshhiller8@gmail.com" class="social-link" aria-label="Email">
        <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
          <path d="M0 3v18h24V3H0zm21.518 2L12 12.713 2.482 5h19.036zM2 19V7.183l10 8.104 10-8.104V19H2z"/>
        </svg>
      </a>
    </div>

    <div class="hero-cta">
      <a href="/#learning" class="cta-button">
        <span>See What I'm Learning Now</span>
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" width="20" height="20">
          <path d="M7 17l9.2-9.2M17 17V7H7"/>
        </svg>
      </a>
    </div>

    <!-- HIGHLIGHTS SECTION -->
    <section class="highlights-section">
      <div class="container">
        <div class="highlights-grid">
          <div class="highlight-card">
            <div class="highlight-icon">üíº</div>
            <div class="highlight-content">
              <h3>Current Role</h3>
              <p>Sofware Developer Intern @ Sigma Software</p>
            </div>
          </div>
          
          <div class="highlight-card">
            <div class="highlight-icon">üéì</div>
            <div class="highlight-content">
              <h3>Education</h3>
              <p>Union College, NY</p>
            </div>
          </div>
          
          <div class="highlight-card">
            <div class="highlight-icon">‚öõÔ∏è</div>
            <div class="highlight-content">
              <h3>Expertise</h3>
              <p>Computational Physics &  AI/ML Software</p>
            </div>
          </div>
        </div>
      </div>
    </section>

    <div class="scroll-cue" aria-hidden="true">
      <span class="scroll-text">Scroll</span>
      <svg class="scroll-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M6 9l6 6 6-6" />
      </svg>
    </div>
  </div>
</section>


  <!-- PROJECTS -->
  <section id="projects" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Projects</h2>

      <!-- Project Filters -->
      <div class="project-filters mb-sm">
        <button class="filter-btn active" data-filter="all">All</button>
        <button class="filter-btn" data-filter="quantum">Quantum</button>
        <button class="filter-btn" data-filter="software">Software</button>
      </div>

      <div class="projects-container">
        <div class="project-section" data-category="quantum">
          <h3 class="mb-sm">Quantum Computing</h3>
          <div class="grid">
            {quantum.map(({ slug, data }) => (
              <a href={`/projects/${slug}/`} class="card-link">
                <img src={data.image} alt={data.title} loading="lazy" />
                <div style="padding:16px 16px 18px;">
                  <div class="muted mb-xs">{data.category}</div>
                  <h4 style="margin:0 0 6px;font-size:1.1rem;">{data.title}</h4>
                  <p class="muted" style="line-height:1.45;">{data.summary}</p>
                </div>
              </a>
            ))}
          </div>
        </div>

        <div class="project-section" data-category="software">
          <h3 class="mt-md mb-sm">Software Engineering</h3>
          <div class="grid">
            {software.map(({ slug, data }) => (
              <a href={`/projects/${slug}/`} class="card-link">
                <img src={data.image} alt={data.title} loading="lazy" />
                <div style="padding:16px 16px 18px;">
                  <div class="muted mb-xs">{data.category}</div>
                  <h4 style="margin:0 0 6px;font-size:1.1rem;">{data.title}</h4>
                  <p class="muted" style="line-height:1.45;">{data.summary}</p>
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  </section>
  
	<!-- SKILLS -->
<section id="skills" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Skills</h2>
    <div class="skills-grid">
      {skills.map(({ data }) => (
        <div class="skill-card card">
          <h3 class="h3" style="margin:0 0 10px;">{data.title}</h3>
          <ul class="skills-list">
            {data.items.map((s) => (
              <li class="skill-item">
                <span class="skill-name">{s.name}</span>
                <span class="skill-dots" aria-label={`Level ${s.level} of 5`}>
                  {[1,2,3,4,5].map(n => (
                    <span class={`dot ${n <= s.level ? 'on' : ''}`} />
                  ))}
                </span>
                {s.note ? <span class="skill-note">{s.note}</span> : null}
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  </div>
</section>

  <!-- WHAT I'M LEARNING -->
  <section id="learning" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">What I'm Learning</h2>
      <div class="learning-grid">
        <div class="learning-card card">
          <div class="learning-header">
            <div class="learning-icon">ü§ñ</div>
            <div>
              <h3 class="h3" style="margin:0 0 8px;">ChatGPT Prompt Engineering for Developers</h3>
              <p class="muted" style="margin:0;">DeepLearning.AI course on building effective prompts and LLM applications</p>
            </div>
          </div>
          <div class="learning-resources">
            <span class="resource-tag">DeepLearning.AI</span>
            <span class="resource-tag">Prompt Engineering</span>
            <span class="resource-tag">LLM Development</span>
          </div>
        </div>

        <div class="learning-card card">
          <div class="learning-header">
            <div class="learning-icon">üî¨</div>
            <div>
              <h3 class="h3" style="margin:0 0 8px;">Quantum Error Correction Research</h3>
              <p class="muted" style="margin:0;">Studying hardware-efficient quantum error correction via concatenated bosonic qubits</p>
            </div>
          </div>
          <div class="learning-resources">
            <a href="https://doi.org/10.1038/s41586-025-08642-7" target="_blank" rel="noopener" class="resource-tag">Nature Paper</a>
            <span class="resource-tag">Bosonic Qubits</span>
            <span class="resource-tag">Error Correction</span>
          </div>
        </div>

        <div class="learning-card card">
          <div class="learning-header">
            <div class="learning-icon">‚ö°</div>
            <div>
              <h3 class="h3" style="margin:0 0 8px;">Advanced Quantum Algorithms</h3>
              <p class="muted" style="margin:0;">Deep diving into VQE, QAOA, and quantum machine learning</p>
            </div>
          </div>
          <div class="learning-resources">
            <span class="resource-tag">IBM Quantum</span>
            <span class="resource-tag">Qiskit Textbook</span>
            <span class="resource-tag">Research Papers</span>
          </div>
        </div>

        <div class="learning-card card">
          <div class="learning-header">
            <div class="learning-icon">üîí</div>
            <div>
              <h3 class="h3" style="margin:0 0 8px;">Cybersecurity Fundamentals</h3>
              <p class="muted" style="margin:0;">Network security, cryptography, and ethical hacking</p>
            </div>
          </div>
          <div class="learning-resources">
            <span class="resource-tag">TryHackMe</span>
            <span class="resource-tag">CompTIA Security+</span>
            <span class="resource-tag">CTF Challenges</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- CERTIFICATIONS -->
<section id="certifications" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Certifications</h2>
    <div class="grid">
      {certs.map(({ data }) => (
        <div class="card" style="display:flex;gap:14px;align-items:flex-start;">
          {data.image ? <img src={data.image} alt={data.title} style="width:56px;height:56px;object-fit:contain;border-radius:10px;" /> : null}
          <div style="flex:1;">
            <div style="display:flex;gap:8px;align-items:baseline;flex-wrap:wrap;">
              <strong>{data.title}</strong>
              <span class="muted">¬∑ {data.issuer}</span>
            </div>
            {data.date ? <div class="muted" style="font-size:.9rem;margin-top:4px;">{data.date}</div> : null}
            {data.skills?.length ? (
              <ul class="tag-list" style="margin-top:8px;">
                {data.skills.map((s) => <li class="tag">{s}</li>)}
              </ul>
            ) : null}
            <div style="display:flex;gap:10px;margin-top:8px;">
              {data.verifyUrl ? <a href={data.verifyUrl} target="_blank" rel="noopener" class="link">Verification</a> : null}
              {data.credentialId ? <span class="muted">ID: {data.credentialId}</span> : null}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<!-- EXPERIENCE -->
<section id="experience" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Experience</h2>

    <div class="xp-carousel">
      <button class="xp-nav prev" aria-label="Previous experience" type="button">‚Äπ</button>

      <ol class="xp-track" aria-label="Experience timeline">
        {xp.map(({ data }) => (
          <li class="xp-card card">
            <div class="xp-meta">
              {data.logo
                ? <img src={data.logo} alt={data.company} class="xp-logo" width="36" height="36" loading="lazy" />
                : <div class="xp-dot" aria-hidden="true" />}
              <div class="xp-head">
                <div class="xp-role">{data.role}</div>
                <div class="xp-company">
                  {data.link
                    ? <a class="link" href={data.link} target="_blank" rel="noopener">{data.company}</a>
                    : data.company}
                  {data.location ? <span class="muted"> ¬∑ {data.location}</span> : null}
                </div>
                <div class="xp-dates muted">{data.start} ‚Äî {data.end ?? 'Present'}</div>
              </div>
            </div>

            <ul class="xp-bullets">
              {data.bullets.map((b) => <li>{b}</li>)}
            </ul>

            {data.tech?.length ? (
              <ul class="tag-list" style="margin-top:8px;">
                {data.tech.map((t) => <li class="tag">{t}</li>)}
              </ul>
            ) : null}
          </li>
        ))}
      </ol>

      <button class="xp-nav next" aria-label="Next experience" type="button">‚Ä∫</button>
    </div>

   <p class="xp-hint">Swipe or use the arrows</p>
  </div>

  <!-- tiny inline script to make the arrows scroll by one card -->
 <script is:inline>
  const container = document.currentScript?.previousElementSibling; // the .container
  const carousel  = container?.querySelector('.xp-carousel');
  const track     = carousel?.querySelector('.xp-track');
  const prev      = carousel?.querySelector('.xp-nav.prev');
  const next      = carousel?.querySelector('.xp-nav.next');

  // Button step size = one card width (+ gap)
  function step() {
    const card = track?.querySelector('.xp-card');
    if (!card) return 360;
    const rect = card.getBoundingClientRect();
    const styles = getComputedStyle(track);
    const gap = parseFloat(styles.columnGap || styles.gap) || 12;
    return rect.width + gap;
  }

  // Buttons (also pause autoplay briefly)
  function pause(ms = 5000){ stop(); clearTimeout(resumeTimer); resumeTimer = setTimeout(play, ms); }
  prev?.addEventListener('click', () => { track?.scrollBy({left:-step(), behavior:'smooth'}); pause(5000); });
  next?.addEventListener('click', () => { track?.scrollBy({left: step(), behavior:'smooth'}); pause(5000); });

  // --- AUTOPLAY (continuous) ---
  const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  let rafId = 0, playing = false, resumeTimer = 0;
  let speed = 1.2; // px per frame (~72px/s at 60fps). Increase if you want faster.

  // Duplicate content to enable seamless loop
  const origHTML = track?.innerHTML ?? '';
  function primeLoop(){
    if (!track) return;
    track.innerHTML = origHTML + origHTML;           // duplicate once
    track.scrollLeft = 0;
  }

  function loop(){
    if (!playing || !track) return;
    track.scrollLeft += speed;

    // When we've scrolled past the first half (original set), jump back by that amount
    const half = track.scrollWidth / 2;
    if (track.scrollLeft >= half) {
      track.scrollLeft -= half;
    }
    rafId = requestAnimationFrame(loop);
  }

  function play(){
    if (reduceMotion.matches || playing || !track) return;
    playing = true;
    cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(loop);
  }

  function stop(){
    playing = false;
    cancelAnimationFrame(rafId);
  }

  // Pause/resume on interaction
  track?.addEventListener('mouseenter', () => stop());
  track?.addEventListener('mouseleave', () => play());
  track?.addEventListener('pointerdown', () => pause(7000));
  track?.addEventListener('wheel', () => pause(4000));
  track?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') pause(6000);
  });

  // Start when section visible; stop when off-screen
  const section = container?.closest('section');
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => { e.isIntersecting ? play() : stop(); });
  }, { threshold: 0.15 });

  // Prime & observe after layout
  requestAnimationFrame(() => {
    primeLoop();
    if (section) io.observe(section);
    // Fallback: if IO doesn't fire (already on screen), just start
    if (section?.getBoundingClientRect().top < window.innerHeight) play();
  });

  // Respect reduced motion changes live
  reduceMotion.addEventListener?.('change', () => { reduceMotion.matches ? stop() : play(); });

  // Re-prime on resize (so card widths update)
  let resizeTimer = 0;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => { stop(); primeLoop(); play(); }, 200);
  });
</script>

</section>
  <!-- EDUCATION -->
  <section id="education" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Education</h2>

      <div class="education-grid">
        {edu.map(({ data }) => (
          <article class="education-card">
            <div class="education-header">
              {data.logo ? (
                <img src={data.logo} alt={data.school} class="edu-logo" width="48" height="48" loading="lazy" />
              ) : null}
              <div class="education-info">
                <h3 class="h3" style="margin:0;">
                  {data.link ? (
                    <a class="link" href={data.link} target="_blank" rel="noopener">{data.school}</a>
                  ) : data.school}
                </h3>
                <div class="education-degree">
                  {data.degree}
                  {data.location ? ` ¬∑ ${data.location}` : ''}
                </div>
                <div class="education-dates">
                  {data.start} ‚Äî {data.end ?? 'Present'}
                  {data.gpa ? ` ¬∑ GPA: ${data.gpa}` : null}
                </div>
              </div>
            </div>

            {data.highlights?.length ? (
              <div class="education-highlights">
                <div class="muted" style="font-size:.9rem;margin-bottom:6px;">Highlights:</div>
                <ul class="highlights-list">
                  {data.highlights.map((h) => <li>{h}</li>)}
                </ul>
              </div>
            ) : null}

            {data.coursework?.length ? (
              <details class="coursework-details">
                <summary class="link">Relevant coursework</summary>
                <div class="coursework-grid">
                  {data.coursework.map((c) => <span class="course-tag">{c}</span>)}
                </div>
              </details>
            ) : null}
          </article>
        ))}
      </div>
    </div>
  </section>

<!-- TESTIMONIALS -->
<section id="testimonials" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">Testimonials</h2>
    
    <!-- Work in Progress Message -->
    <div class="work-in-progress-card">
      <div class="wip-icon">üöß</div>
      <div class="wip-content">
        <h3>Work in Progress</h3>
        <p>I've reached out to colleagues and mentors for testimonials. Check back soon to see what they have to say!</p>
      </div>
    </div>
    
    <!-- Original testimonials (hidden for now) -->
    <div class="grid" style="display: none;">
      {quotes.map(({ data }) => (
        <blockquote class="card" style="margin:0;display:grid;grid-template-columns:auto 1fr;gap:14px;align-items:center;">
          {data.avatar ? <img src={data.avatar} alt={data.author} style="width:56px;height:56px;border-radius:50%;object-fit:cover;" /> : null}
          <div>
            <p style="margin:0 0 8px;line-height:1.5;">"{data.quote}"</p>
            <footer class="muted" style="font-size:.95rem;">
              ‚Äî {data.author}
              {data.role ? `, ${data.role}` : ''}{data.org ? `, ${data.org}` : ''}
              {data.link ? (
                <>
                  {' ¬∑ '}
                  <a href={data.link} class="link" target="_blank" rel="noopener">Profile</a>
                </>
              ) : null}
            </footer>
          </div>
        </blockquote>
      ))}
    </div>
  </div>
</section>


  <!-- ABOUT -->
<section id="about" class="section">
  <div class="container">
    <h2 class="h1 mb-sm">About Me</h2>

    <div class="card">
      <p>
        I'm a student Union College studying physics who likes building software,
        running experiments, and turning hard ideas into clear explanations.
      </p>

      <p>
        <strong>Science & tech:</strong> I've worked on a parametric down-conversion setup for
        single-photon experiments (tightened the apparatus, sped up Python data collection/processing);
        built computational physics simulations (PHY 310); and created Manim visuals. I also earned
        three IBM Quantum credentials in Feb 2025 (Basics of Quantum Information, Practical Intro to
        Quantum-Safe Cryptography, Variational Algorithm Design).
      </p>

      <ul style="margin:0 0 12px 18px; line-height:1.6;">
        <li><strong>Industry:</strong> Software Developer Intern @ Sigma Software (Python, collaboration, delivery).</li>
        <li><strong>Quantum/Algorithms:</strong> Qiskit circuits, variational workflows, simulator vs. hardware comparisons.</li>
      </ul>

      <p>
        <strong>What I'm looking for:</strong> Roles where I can ship real software (data/infra, simulation, dev tools)
        and keep a foot in quantum (algorithms, simulation, education, or platform tooling).
      </p>

      <p>
        <strong>Outside the lab:</strong> Team captain for Union Men's Swimming & Diving (SAAC member), campus tour guide,
        and community volunteer. (See Linkedin Below)
      </p>
    </div>

    <!-- Optional photo row (replace images with your own or remove this block) -->
  	<div class="photo-grid">
  		<figure class="photo"><img src="/assets/about/swim-1.png" alt="Training" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/hiking.png" alt="Hiking" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/hiking2.png" alt="Hiking" loading="lazy" /></figure>
  		<figure class="photo"><img src="/assets/about/headshot.jpeg" alt="Headshot" loading="lazy" /></figure>
	</div>
  </div>
</section>

  <!-- GITHUB ANALYTICS -->
  <section id="github-analytics" class="section">
    <div class="container">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <h2 class="h1 mb-sm" style="margin: 0;">GitHub Activity</h2>
        <button id="refresh-github" class="refresh-btn" onclick="refreshGitHubData()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" width="16" height="16">
            <path d="M1 4v6h6M23 20v-6h-6"/>
            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
          </svg>
          Refresh
        </button>
      </div>
      
      <div class="github-stats-grid">
        <!-- Contribution Graph -->
        <div class="github-card card">
          <h3 class="h3 mb-sm">Contribution Activity</h3>
          <div class="contribution-graph" id="contribution-graph">
            <div class="loading">Loading contribution data...</div>
          </div>
        </div>

        <!-- Stats Cards -->
        <div class="github-stats-cards">
          <div class="stat-card card">
            <div class="stat-number" id="total-stars">-</div>
            <div class="stat-label">Total Stars</div>
          </div>
          
          <div class="stat-card card">
            <div class="stat-number" id="total-repos">-</div>
            <div class="stat-label">Public Repos</div>
          </div>
          
          <div class="stat-card card">
            <div class="stat-number" id="total-commits">-</div>
            <div class="stat-label">Total Contributions (Past 6 Months)</div>
          </div>
          
          <div class="stat-card card">
            <div class="stat-number" id="top-language">-</div>
            <div class="stat-label">Top Language</div>
          </div>
        </div>


      </div>
    </div>
  </section>

  <!-- CONTACT (Netlify form, no backend needed) -->
  <section id="contact" class="section">
    <div class="container">
      <h2 class="h1 mb-sm">Contact</h2>
      <form name="contact" method="POST" data-netlify="true" class="card" style="max-width:720px;">
        <input type="hidden" name="form-name" value="contact" />
        <label>Name<br/><input name="name" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"/></label>
        <label>Email<br/><input name="email" type="email" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"/></label>
        <label>Message<br/><textarea name="message" rows="6" required style="width:100%;padding:10px;border-radius:10px;border:none;margin:6px 0 12px;background:#0b1220;color:#e5e7eb"></textarea></label>
        <button class="btn btn-primary" type="submit">Send</button>
      </form>

      <p class="muted mt-md">
        Or reach me at <a class="link" href="joshhiller8@gmail.com">joshhiller8@gmail.com</a>
        ¬∑ <a class="link" href="https://github.com/hillerj1" target="_blank" rel="noopener">GitHub</a>
        ¬∑ <a class="link" href="https://www.linkedin.com/in/joshua-hiller-58m/" target="_blank" rel="noopener">LinkedIn</a>
      </p>
    </div>
  </section>

  <!-- Back to Top Button -->
  <button class="back-to-top" aria-label="Back to top">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" width="20" height="20">
      <path d="M18 15l-6-6-6 6"/>
    </svg>
  </button>

  <style>
    /* Global Hover Effects for All Cards and Interactive Elements */
    
    /* All cards get hover effects */
    .card, .card-link, .skill-card, .xp-card, blockquote.card {
      transition: all 0.2s ease;
      cursor: pointer;
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
    }
    
    .card:hover, .card-link:hover, .skill-card:hover, .xp-card:hover, blockquote.card:hover {
      border-color: rgba(59, 130, 246, 0.3);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      background: rgba(255, 255, 255, 0.12);
    }
    
    /* Project cards get special hover treatment */
    .card-link {
      display: block;
      text-decoration: none;
      color: inherit;
      border-radius: 12px;
      overflow: hidden;
    }
    
    .card-link:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    }
    
    .card-link:hover img {
      transform: scale(1.02);
    }
    
    .card-link img {
      transition: transform 0.3s ease;
    }
    
    /* Skills cards */
    .skill-card {
      border-radius: 12px;
      padding: 20px;
    }
    
    .skill-card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Experience cards - fit content better */
    .xp-card {
      border-radius: 12px;
      padding: 20px;
      height: fit-content;
    }
    
    .xp-card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Make experience cards more compact on mobile */
    @media (max-width: 768px) {
      .xp-card {
        padding: 16px;
      }
    }
    
    @media (max-width: 480px) {
      .xp-card {
        padding: 14px;
      }
    }
    
    /* Certification cards */
    .card[style*="display:flex;gap:14px"]:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Testimonial cards */
    blockquote.card:hover {
      background: var(--card-bg-hover, #2d3748);
    }
    
    /* Tag hover effects */
    .tag, .course-tag {
      transition: all 0.2s ease;
      cursor: default;
    }
    
    .tag:hover, .course-tag:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      background: var(--tag-bg-hover, #4b5563);
    }
    
    /* Button hover effects */
    .btn {
      transition: all 0.2s ease;
    }
    
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    
    .btn-primary:hover {
      background: var(--btn-primary-hover, #1d4ed8);
    }
    
    /* Link hover effects */
    .link {
      transition: all 0.2s ease;
    }
    
    .link:hover {
      color: var(--link-hover, #60a5fa);
      text-decoration: underline;
    }
    
    /* Form input hover effects */
    input, textarea {
      transition: all 0.2s ease;
    }
    
    input:focus, textarea:focus {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      border-color: var(--accent-color, #3b82f6);
    }
    
    /* Photo hover effects */
    .photo img {
      transition: all 0.3s ease;
    }
    
    .photo:hover img {
      transform: scale(1.05);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }
    
    /* Navigation arrows hover effects */
    .xp-nav {
      transition: all 0.2s ease;
    }
    
    .xp-nav:hover {
      background: var(--nav-hover, #374151);
      transform: scale(1.1);
    }
    
    /* Education Section Styles */
    .education-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: 24px;
      margin-top: 24px;
    }

    .education-card {
      background: var(--card-bg, #1e293b);
      border: 1px solid var(--card-border, #334155);
      border-radius: 12px;
      padding: 24px;
      transition: all 0.2s ease;
    }

    .education-card:hover {
      border-color: var(--card-border-hover, #475569);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .education-header {
      display: flex;
      gap: 16px;
      align-items: flex-start;
      margin-bottom: 20px;
    }

    .education-info {
      flex: 1;
    }

    .education-degree {
      color: var(--muted-color, #94a3b8);
      font-size: 0.95rem;
      margin: 4px 0;
    }

    .education-dates {
      color: var(--muted-color, #94a3b8);
      font-size: 0.9rem;
      margin-top: 4px;
    }

    .education-highlights {
      margin: 16px 0;
      padding: 16px;
      background: var(--highlights-bg, rgba(59, 130, 246, 0.1));
      border-radius: 8px;
      border-left: 3px solid var(--accent-color, #3b82f6);
    }

    .highlights-list {
      margin: 0;
      padding-left: 20px;
      line-height: 1.6;
    }

    .highlights-list li {
      margin-bottom: 4px;
    }

    .coursework-details {
      margin-top: 16px;
    }

    .coursework-details summary {
      cursor: pointer;
      font-weight: 500;
      color: var(--link-color, #3b82f6);
      margin-bottom: 12px;
    }

    .coursework-details summary:hover {
      text-decoration: underline;
    }

    .coursework-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 12px;
    }

    .course-tag {
      background: var(--tag-bg, #374151);
      color: var(--tag-color, #e5e7eb);
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      border: 1px solid var(--tag-border, #4b5563);
    }

    .edu-logo {
      border-radius: 8px;
      object-fit: contain;
      background: var(--logo-bg, rgba(255, 255, 255, 0.05));
      padding: 4px;
    }

    /* Hero Social Media Icons */
    .hero-social {
      display: flex;
      gap: 40px;
      margin: 24px 0;
      justify-content: center;
    }

    .social-link {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      color: #e5e7eb;
      transition: all 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .social-link:hover {
      background: rgba(59, 130, 246, 0.2);
      border-color: #3b82f6;
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(59, 130, 246, 0.3);
      color: #60a5fa;
    }

    /* Hero CTA Button */
    .hero-cta {
      margin: 32px 0;
      text-align: center;
    }

    .cta-button {
      display: inline-flex;
      align-items: center;
      gap: 12px;
      padding: 16px 32px;
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      text-decoration: none;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      border: 2px solid transparent;
      box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .cta-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
      background: linear-gradient(135deg, #1d4ed8, #1e40af);
      border-color: rgba(255, 255, 255, 0.2);
    }

    .cta-button svg {
      transition: transform 0.3s ease;
    }

    .cta-button:hover svg {
      transform: translateX(4px);
    }

    /* Highlights Section */
    .highlights-section {
      padding: 60px 0;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(10px);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .highlights-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 24px;
      margin-top: 0;
    }

    .highlight-card {
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.15);
      border-radius: 16px;
      padding: 32px 24px;
      text-align: center;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    .highlight-card:hover {
      transform: translateY(-4px);
      background: rgba(255, 255, 255, 0.12);
      border-color: rgba(59, 130, 246, 0.3);
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    }

    .highlight-icon {
      font-size: 3rem;
      margin-bottom: 16px;
      display: block;
    }

    .highlight-content h3 {
      margin: 0 0 8px 0;
      font-size: 1.2rem;
      font-weight: 600;
      color: #e5e7eb;
    }

    .highlight-content p {
      margin: 0;
      color: #94a3b8;
      font-size: 0.95rem;
    }

    /* Enhanced Scroll Cue */
    .scroll-cue {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
      margin-top: 40px;
      opacity: 0.8;
      transition: all 0.3s ease;
    }

    .scroll-cue:hover {
      opacity: 1;
      transform: translateY(-2px);
    }

    .scroll-text {
      font-size: 1.1rem;
      font-weight: 500;
      letter-spacing: 0.5px;
      text-transform: uppercase;
    }

    .scroll-icon {
      width: 32px;
      height: 32px;
      animation: bounce 2s infinite;
    }

    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
      }
      40% {
        transform: translateY(-8px);
      }
      60% {
        transform: translateY(-4px);
      }
    }

    /* Learning Section Styles */
    .learning-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 20px;
      margin-top: 24px;
    }

    .learning-card {
      padding: 24px;
      border-radius: 12px;
      transition: all 0.3s ease;
    }

    .learning-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    }

    .learning-header {
      display: flex;
      gap: 16px;
      align-items: flex-start;
      margin-bottom: 20px;
    }

    .learning-icon {
      font-size: 2rem;
      width: 48px;
      height: 48px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(59, 130, 246, 0.1);
      border-radius: 12px;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }

    .learning-progress {
      margin: 16px 0;
    }

    .progress-text {
      font-size: 0.9rem;
      color: #94a3b8;
      margin-top: 8px;
      display: block;
    }

    .learning-fill {
      background: linear-gradient(90deg, #10b981, #34d399);
    }

    .learning-resources {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 16px;
    }

    .resource-tag {
      background: rgba(59, 130, 246, 0.1);
      color: #60a5fa;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      border: 1px solid rgba(59, 130, 246, 0.2);
      transition: all 0.2s ease;
      text-decoration: none;
    }

    .resource-tag:hover {
      background: rgba(59, 130, 246, 0.2);
      transform: translateY(-1px);
    }

    /* Project Filters */
    .project-filters {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .filter-btn {
      padding: 8px 16px;
      border: 1px solid #4b5563;
      border-radius: 8px;
      background: #1f2937;
      color: #e5e7eb;
      font-size: 0.9rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }

    .filter-btn:hover {
      background: #374151;
      border-color: #6b7280;
    }

    .filter-btn.active {
      background: #3b82f6;
      border-color: #3b82f6;
      color: white;
    }

    .projects-container {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .project-section {
      display: block; /* Show all sections by default */
    }

    .project-section.hidden {
      display: none; /* Hide sections when filtered */
    }

    /* Remove the default hiding since we want all visible initially */

    /* Back to Top Button */
    .back-to-top {
      position: fixed;
      bottom: 30px;
      right: 30px;
      width: 50px;
      height: 50px;
      background: rgba(59, 130, 246, 0.9);
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      z-index: 1000;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .back-to-top:hover {
      background: rgba(59, 130, 246, 1);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
    }

    .back-to-top.visible {
      display: flex;
    }

    @media (max-width: 768px) {
      .back-to-top {
        bottom: 20px;
        right: 20px;
        width: 45px;
        height: 45px;
      }
    }

    /* GitHub Analytics Styles */
    .github-stats-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 24px;
      margin-top: 24px;
    }

    .github-card {
      padding: 24px;
    }

    .github-stats-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
    }

    .stat-card {
      text-align: center;
      padding: 24px 16px;
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
    }

    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      color: #3b82f6;
      margin-bottom: 8px;
      font-family: 'Space Grotesk', monospace;
    }

    .stat-label {
      font-size: 0.9rem;
      color: #94a3b8;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .contribution-graph {
      min-height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.02);
      border-radius: 12px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .loading {
      color: #94a3b8;
      font-style: italic;
    }



    /* Responsive adjustments */
    @media (max-width: 768px) {
      .github-stats-cards {
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
      }
      
      .stat-card {
        padding: 20px 12px;
      }
      
      .stat-number {
        font-size: 2rem;
      }
      
      .github-card {
        padding: 20px;
      }
    }

    @media (max-width: 480px) {
      .github-stats-cards {
        grid-template-columns: 1fr;
      }
    }

    /* Refresh Button */
    .refresh-btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      background: rgba(59, 130, 246, 0.1);
      color: #60a5fa;
      border: 1px solid rgba(59, 130, 246, 0.2);
      border-radius: 8px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.2s ease;
      backdrop-filter: blur(10px);
    }

    .refresh-btn:hover {
      background: rgba(59, 130, 246, 0.2);
      border-color: rgba(59, 130, 246, 0.4);
      transform: translateY(-1px);
    }

    .refresh-btn svg {
      transition: transform 0.3s ease;
    }

    .refresh-btn:hover svg {
      transform: rotate(180deg);
    }

    .refresh-btn:active {
      transform: translateY(0);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .education-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      
      .education-card {
        padding: 20px;
      }
      
      .education-header {
        gap: 12px;
      }

      .hero-social {
        gap: 24px;
      }

      .social-link {
        width: 44px;
        height: 44px;
      }

      .learning-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }

      .cta-button {
        padding: 14px 28px;
        font-size: 1rem;
      }

      .highlights-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 16px;
      }

      .highlight-card {
        padding: 24px 16px;
      }

      .highlight-icon {
        font-size: 2.5rem;
      }

      .highlight-content h3 {
        font-size: 1.1rem;
      }

      .highlight-content p {
        font-size: 0.9rem;
      }
    }

    /* Additional mobile improvements */
    @media (max-width: 480px) {
      .highlights-grid {
        grid-template-columns: 1fr;
        gap: 12px;
      }

      .highlight-card {
        padding: 20px 16px;
      }

      .section {
        padding: 40px 0;
      }

      .container {
        padding: 0 20px;
      }
    }

    /* Work in Progress Card */
    .work-in-progress-card {
      background: rgba(255, 255, 255, 0.06);
      border: 1px solid rgba(255, 255, 255, 0.12);
      border-radius: 16px;
      padding: 48px 32px;
      text-align: center;
      backdrop-filter: blur(10px);
      max-width: 600px;
      margin: 0 auto;
    }

    .wip-icon {
      font-size: 3rem;
      margin-bottom: 20px;
      display: block;
    }

    .wip-content h3 {
      margin: 0 0 16px 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: #e5e7eb;
    }

    .wip-content p {
      margin: 0;
      color: #94a3b8;
      font-size: 1.1rem;
      line-height: 1.6;
    }

    @media (max-width: 768px) {
      .work-in-progress-card {
        padding: 32px 24px;
      }

      .wip-icon {
        font-size: 2.5rem;
      }

      .wip-content h3 {
        font-size: 1.3rem;
      }

      .wip-content p {
        font-size: 1rem;
      }
    }

    /* Progress Bar */
    .progress-bar {
      position: fixed;
      top: 0;
      left: 0;
      height: 5px;
      background: linear-gradient(to right, #3b82f6, #1d4ed8);
      z-index: 1000;
      width: 0%;
      transition: width 0.3s ease-in-out;
    }

    /* Enhanced card animations */
    .card, .card-link, .skill-card, .xp-card {
      opacity: 1; /* Show all cards by default */
      transform: translateY(0); /* Reset transform */
      transition: opacity 0.6s ease, transform 0.6s ease;
    }

    .card.animate, .card-link.animate, .skill-card.animate, .xp-card.animate {
      opacity: 1;
      transform: translateY(0);
    }
  </style>

  <script>
    // Progress bar functionality
    const progressBar = document.getElementById('progress-bar') as HTMLElement;
    
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset;
      const docHeight = document.body.offsetHeight - window.innerHeight;
      const scrollPercent = (scrollTop / docHeight) * 100;
      
      if (progressBar) {
        progressBar.style.width = scrollPercent + '%';
      }
    });

    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault();
        const href = anchor.getAttribute('href');
        if (href) {
          const target = document.querySelector(href) as HTMLElement;
          if (target) {
            const navHeight = (document.querySelector('.nav') as HTMLElement)?.offsetHeight || 0;
            const targetPosition = target.offsetTop - navHeight - 20;
            
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        }
      });
    });

    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.opacity = '1';
          (entry.target as HTMLElement).style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);

    // Observe all cards for fade-in animation (but not experience cards)
    document.querySelectorAll('.card:not(.xp-card), .card-link, .skill-card').forEach(el => {
      (el as HTMLElement).style.opacity = '0';
      (el as HTMLElement).style.transform = 'translateY(20px)';
      (el as HTMLElement).style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });

    // Project Filtering
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectSections = document.querySelectorAll('.project-section');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        const filter = (button as HTMLElement).dataset.filter;
        projectSections.forEach(section => {
          if (filter === 'all' || (section as HTMLElement).dataset.category === filter) {
            section.classList.remove('hidden');
          } else {
            section.classList.add('hidden');
          }
        });
      });
    });

    // Back to Top Button
    const backToTopButton = document.querySelector('.back-to-top') as HTMLElement;
    window.addEventListener('scroll', () => {
      if (window.pageYOffset > 300) { // Show button when scrolled past 300px
        backToTopButton.classList.add('visible');
      } else {
        backToTopButton.classList.remove('visible');
      }
    });

    backToTopButton.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  </script>

  <script is:inline>
    // GitHub Analytics
    async function fetchGitHubData() {
      try {
        console.log('Fetching GitHub data...');
        
        // Fetch user data
        const userResponse = await fetch('https://api.github.com/users/hillerj1');
        console.log('User response status:', userResponse.status);
        
        if (!userResponse.ok) {
          throw new Error(`User API failed: ${userResponse.status} ${userResponse.statusText}`);
        }
        
        const userData = await userResponse.json();
        console.log('User data:', userData);
        
        // Fetch repositories
        const reposResponse = await fetch('https://api.github.com/users/hillerj1/repos?per_page=100&sort=updated');
        console.log('Repos response status:', reposResponse.status);
        
        if (!reposResponse.ok) {
          throw new Error(`Repos API failed: ${reposResponse.status} ${reposResponse.statusText}`);
        }
        
        const reposData = await reposResponse.json();
        console.log('Repos data count:', reposData.length);
        
        // Calculate stats
        const totalStars = reposData.reduce((sum, repo) => sum + (repo.stargazers_count || 0), 0);
        const totalRepos = userData.public_repos || 0;
        const topLanguage = getTopLanguage(reposData);
        
        console.log('Calculated stats:', { totalStars, totalRepos, topLanguage });
        
        // Update stats
        const starsElement = document.getElementById('total-stars');
        const reposElement = document.getElementById('total-repos');
        const languageElement = document.getElementById('top-language');
        
        if (starsElement) starsElement.textContent = totalStars.toLocaleString();
        if (reposElement) reposElement.textContent = totalRepos.toLocaleString();
        if (languageElement) languageElement.textContent = topLanguage || 'N/A';
        
        // NEW APPROACH: Create contribution data from repository activity
        const contributionData = await buildContributionData(reposData);
        
        // Show total contributions
        const commitsElement = document.getElementById('total-commits');
        if (commitsElement) {
          commitsElement.textContent = contributionData.totalContributions.toLocaleString();
          // Update the label to be more accurate
          const labelElement = commitsElement.nextElementSibling;
          if (labelElement && labelElement.className === 'stat-label') {
            labelElement.textContent = 'Total Contributions (Past Year)';
          }
        }
        
        // Create accurate contribution graph from repository data
        createAccurateContributionGraph(contributionData);
        
        console.log('GitHub data loaded successfully!');
        
      } catch (error) {
        console.error('Error fetching GitHub data:', error);
        
        // Show more specific error messages
        const errorMessage = error.message || 'Unknown error occurred';
        document.querySelectorAll('.loading').forEach(el => {
          el.innerHTML = `
            <div style="text-align: center; color: #ef4444;">
              <div style="margin-bottom: 8px;">‚ö†Ô∏è GitHub data unavailable</div>
              <div style="font-size: 0.8rem; color: #94a3b8;">${errorMessage}</div>
              <div style="font-size: 0.8rem; color: #94a3b8; margin-top: 8px;">
                This might be due to rate limiting or API changes.
              </div>
            </div>
          `;
        });
        
        // Show fallback data
        showFallbackData();
      }
    }

    async function buildContributionData(repos) {
      const contributionData = {
        dailyActivity: {},
        totalContributions: 0
      };
      
      // Initialize last 365 days with 0 activity
      const now = new Date();
      for (let i = 0; i < 365; i++) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        const dateStr = date.toISOString().split('T')[0];
        contributionData.dailyActivity[dateStr] = 0;
      }
      
      // Process each repository
      for (let i = 0; i < Math.min(repos.length, 8); i++) { // Limit to 8 repos to avoid rate limiting
        const repo = repos[i];
        try {
          console.log(`Processing repo: ${repo.name}`);
          
          // Get commit activity for this repo
          const commitsResponse = await fetch(`https://api.github.com/repos/hillerj1/${repo.name}/commits?per_page=100&since=${new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000).toISOString()}`);
          
          if (commitsResponse.ok) {
            const commits = await commitsResponse.json();
            console.log(`Repo ${repo.name}: ${commits.length} commits in last year`);
            
            // Count commits by date
            commits.forEach(commit => {
              if (commit.commit && commit.commit.author && commit.commit.author.date) {
                const commitDate = commit.commit.author.date.split('T')[0];
                if (contributionData.dailyActivity[commitDate] !== undefined) {
                  contributionData.dailyActivity[commitDate]++;
                  contributionData.totalContributions++;
                }
              }
            });
          }
          
          // Small delay to avoid rate limiting
          await new Promise(resolve => setTimeout(resolve, 300));
          
        } catch (error) {
          console.warn(`Error processing repo ${repo.name}:`, error);
        }
      }
      
      console.log('Contribution data built:', contributionData);
      return contributionData;
    }

    function showFallbackData() {
      console.log('Showing fallback data...');
      
      // Show more realistic fallback stats based on typical developer activity
      const fallbackStats = {
        stars: '25+',
        repos: '30+',
        contributions: '100+',
        language: 'Python'
      };
      
      // Update stats with fallback data
      const starsElement = document.getElementById('total-stars');
      const reposElement = document.getElementById('total-repos');
      const languageElement = document.getElementById('top-language');
      const commitsElement = document.getElementById('total-commits');
      
      if (starsElement) starsElement.textContent = fallbackStats.stars;
      if (reposElement) reposElement.textContent = fallbackStats.repos;
      if (languageElement) languageElement.textContent = fallbackStats.language;
      if (commitsElement) commitsElement.textContent = fallbackStats.contributions;
      
      // Update the label to show "Total Contributions" instead of "Total Commits"
      if (commitsElement) {
        const labelElement = commitsElement.nextElementSibling;
        if (labelElement && labelElement.className === 'stat-label') {
          labelElement.textContent = 'Total Contributions (Past Year)';
        }
      }
      
      
      
      // Create a simple fallback contribution graph
      createSimpleFallbackGraph();
    }
    
    function createSimpleFallbackGraph() {
      const container = document.getElementById('contribution-graph');
      if (!container) return;
      
      container.innerHTML = `
        <div style="text-align: center; padding: 20px;">
          <div style="margin-bottom: 16px;">
            <div style="color: #94a3b8; font-size: 1.1rem; margin-bottom: 16px;">
              üîÑ Loading real GitHub data...
            </div>
            <div style="color: #ef4444; font-size: 0.9rem;">
              Click the refresh button above to try again
            </div>
          </div>
        </div>
      `;
    }

    function getTopLanguage(repos) {
      const languages = {};
      repos.forEach(repo => {
        if (repo.language) {
          languages[repo.language] = (languages[repo.language] || 0) + 1;
        }
      });
      
      return Object.entries(languages)
        .sort(([,a], [,b]) => b - a)[0]?.[0] || 'N/A';
    }





    function createAccurateContributionGraph(contributionData) {
      const container = document.getElementById('contribution-graph');
      if (!container) return;
      
      // Process contribution data to create a real activity timeline
      const activityByDate = contributionData.dailyActivity;
      const now = new Date();
      
      // Initialize last 365 days with 0 activity
      for (let i = 0; i < 365; i++) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        const dateStr = date.toISOString().split('T')[0];
        activityByDate[dateStr] = activityByDate[dateStr] || 0;
      }
      
      // Create SVG contribution graph
      const graphWidth = 800;
      const graphHeight = 120;
      const cellSize = 12;
      const cellGap = 2;
      const weeks = 53; // 53 weeks to show full year
      const daysPerWeek = 7;
      
      let svgContent = '';
      const colors = ['#0d1117', '#161b22', '#0f5323', '#116c32', '#1a7f37', '#238636'];
      
      // Generate grid
      for (let week = 0; week < weeks; week++) {
        for (let day = 0; day < daysPerWeek; day++) {
          const dayIndex = week * daysPerWeek + day;
          const date = new Date(now);
          date.setDate(date.getDate() - (364 - dayIndex));
          const dateStr = date.toISOString().split('T')[0];
          const activity = activityByDate[dateStr] || 0;
          
          // Determine color based on activity level
          let colorIndex = 0;
          if (activity > 0) {
            colorIndex = Math.min(Math.floor(activity / 2) + 1, colors.length - 1);
          }
          
          const x = week * (cellSize + cellGap);
          const y = day * (cellSize + cellGap);
          
          svgContent += `<rect x="${x}" y="${y}" width="${cellSize}" height="${cellSize}" fill="${colors[colorIndex]}" rx="2" title="${dateStr}: ${activity} activities"/>`;
        }
      }
      
      // Add day labels
      const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      dayLabels.forEach((day, index) => {
        const y = index * (cellSize + cellGap) + cellSize / 2;
        svgContent += `<text x="-25" y="${y + 4}" fill="#94a3b8" font-size="10" text-anchor="end">${day}</text>`;
      });
      
      // Add month labels
      const monthLabels = [];
      for (let i = 0; i < 12; i++) {
        const date = new Date(now.getFullYear(), i, 1);
        const monthName = date.toLocaleDateString('en-US', { month: 'short' });
        const weekOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / (7 * 24 * 60 * 60 * 1000));
        monthLabels.push({ name: monthName, week: weekOfYear });
      }
      
      monthLabels.forEach(({ name, week }) => {
        const x = week * (cellSize + cellGap);
        svgContent += `<text x="${x}" y="-10" fill="#94a3b8" font-size="10" text-anchor="start">${name}</text>`;
      });
      
      // Add legend
      const legendY = graphHeight + 20;
      colors.forEach((color, index) => {
        const x = index * 80;
        svgContent += `<rect x="${x}" y="${legendY}" width="12" height="12" fill="${color}" rx="2"/>`;
        const label = index === 0 ? 'No activity' : index === 1 ? '1-2 activities' : `${index * 2 - 1}+ activities`;
        svgContent += `<text x="${x + 20}" y="${legendY + 9}" fill="#94a3b8" font-size="10">${label}</text>`;
      });
      
      container.innerHTML = `
        <div style="text-align: center; padding: 20px;">
          <div style="margin-bottom: 16px; overflow-x: auto;">
            <svg width="${graphWidth + 50}" height="${graphHeight + 60}" viewBox="-30 -20 ${graphWidth + 50} ${graphHeight + 60}">
              ${svgContent}
            </svg>
          </div>
          <div style="font-size: 0.9rem; color: #94a3b8;">
            Real contribution activity over the last year
          </div>
        </div>
      `;
    }

    function createContributionGraph() {
      // This is now deprecated - use createRealContributionGraph instead
      createRealContributionGraph([]);
    }

    // Initialize GitHub analytics when the section comes into view
    const githubSection = document.getElementById('github-analytics');
    if (githubSection) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            fetchGitHubData();
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(githubSection);
    }

    // Global refresh function
    function refreshGitHubData() {
      console.log('Manual refresh requested...');
      
      // Reset loading states
      document.querySelectorAll('.loading').forEach(el => {
        el.innerHTML = '<div style="text-align: center; color: #60a5fa;">üîÑ Refreshing GitHub data...</div>';
      });
      
      // Fetch fresh data
      fetchGitHubData();
    }
  </script>
</Layout>
